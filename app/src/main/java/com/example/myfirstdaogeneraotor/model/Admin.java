package com.example.myfirstdaogeneraotor.model;

import com.example.myfirstdaogeneraotor.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ADMIN".
 */
public class Admin {

    private Long id;
    private String name;
    private String company;
    private Long rollno;
    private Long employeeno;
    private Long employeeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdminDao myDao;

    private Employee employee;
    private Long employee__resolvedKey;


    public Admin() {
    }

    public Admin(Long id) {
        this.id = id;
    }

    public Admin(Long id, String name, String company, Long rollno, Long employeeno, Long employeeId) {
        this.id = id;
        this.name = name;
        this.company = company;
        this.rollno = rollno;
        this.employeeno = employeeno;
        this.employeeId = employeeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdminDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }

    public Long getRollno() {
        return rollno;
    }

    public void setRollno(Long rollno) {
        this.rollno = rollno;
    }

    public Long getEmployeeno() {
        return employeeno;
    }

    public void setEmployeeno(Long employeeno) {
        this.employeeno = employeeno;
    }

    public Long getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(Long employeeId) {
        this.employeeId = employeeId;
    }

    /** To-one relationship, resolved on first access. */
    public Employee getEmployee() {
        Long __key = this.employeeId;
        if (employee__resolvedKey == null || !employee__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmployeeDao targetDao = daoSession.getEmployeeDao();
            Employee employeeNew = targetDao.load(__key);
            synchronized (this) {
                employee = employeeNew;
            	employee__resolvedKey = __key;
            }
        }
        return employee;
    }

    public void setEmployee(Employee employee) {
        synchronized (this) {
            this.employee = employee;
            employeeId = employee == null ? null : employee.getId();
            employee__resolvedKey = employeeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
